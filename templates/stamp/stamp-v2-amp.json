{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "cloud": {
            "type": "string",
            "defaultValue": "bvt",
            "allowedValues": [
                "bvt",
                "int",
                "prod"
            ],
            "metadata": {
                "description": "The target environment being provisioned."
            }
        },
        "deploymentVersionId": {
            "type": "string",
            "defaultValue": "201705141636",
            "metadata": {
                "description": "The identifier for versioning bits deployed to the application servers."
            }
        },
        "applicationAdminUserPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the super user account for the application."
            }
        },
        "backendAdminUserPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the administrative users for the application databases."
            }
        },
        "databaseVirtualMachineSku": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "allowedValues": [
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2"
            ],
            "metadata": {
                "description": "The size of virtual machine to use for database servers (mongo & mysql). See https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/ for the specifics of the various options"
            }
        },
        "frontendVirtualMachineSku": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "allowedValues": [
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2"
            ],
            "metadata": {
                "description": "The size of virtual machine to use for frontend application servers. See https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/ for the specifics of the various options"
            }
        },
        "frontendVirtualMachineCount": {
            "type": "string",
            "defaultValue": "1",
            "metadata": {
                "description": "Number of virtual machines to use in as load-balanced application servers."
            }
        },
        "azureActiveDirectoryWebClientId": {
            "type": "string",
            "metadata": {
                "description": "Client Id of the Azure Active Directory (AAD) user or web application that will have access to the azure keyvault."
            }
        },
        "azureActiveDirectoryWebClientKey": {
            "type": "securestring",
            "metadata": {
                "description": "Client Key of the Azure Active Directory (AAD) user or web application that will have access to the azure keyvault."
            }
        },
        "azureActiveDirectoryTenantId": {
            "type": "string",
            "metadata": {
                "description": "Id of the Azure Active Directory (AAD) tenant the user or web application will authenticate against."
            }
        },
        "smtpServer": {
            "type": "string",
            "metadata": {
                "description": "FQDN of SMTP server used for relaying deployment and other system notifications"
            }
        },
        "smtpServerPort": {
            "type": "string",
            "metadata": {
                "description": "Port of SMTP server used for relaying deployment and other system notifications"
            }
        },
        "smtpAuthenticationUserName": {
            "type": "string",
            "metadata": {
                "description": "User name for authenticating against the SMTP server used for relaying deployment and other system notifications"
            }
        },
        "smtpAuthenticationUserPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for authenticating against the SMTP server used for relaying deployment and other system notifications"
            }
        },
        "clusterAdminEmailAddress": {
            "type": "string",
            "metadata": {
                "description": "Email address of the administrator where system and other notifications will be sent"
            }
        },
        "keyVaultAdminUserObjectId": {
            "type": "string",
            "metadata": {
                "description": "Object Id of the Azure Active Directory user or service principal that will have access to the vault. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
            }
        },
        "keyVaultAdminPublicKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH public key that will be associated with the cluster administrative userlogin. This SSH key (public & private) will be used instead of a username/password combination to access the cluster for administrative purposes."
            }
        },
        "keyVaultAdminPrivateKey": {
            "type": "string",
            "metadata": {
                "description": "SSH private key that will be associated with the cluster administrative userlogin. This SSH key (public & private) will be used instead of a username/password combination to access the cluster for administrative purposes. This file is expected to be base64-encoded before pasting its contents here."
            }
        },
        "keyVaultSecretCloudConfiguration": {
            "type": "string",
            "defaultValue": "IyEvYmluL2Jhc2gKCiMgT3BlbiBlZFggY29uZmlndXJhdGlvbiAoc2VydmVyLXZhcnMueW1sKSBjYW4gYmUgdG9rZW5pemVkIHN1Y2ggdGhhdCB2YXJpYWJsZSBleHBhbnNpb24KIyB1c2luZyBveGEtdG9vbHMtY29uZmlnIGVudmlyb25tZW50IGNvbmZpZ3VyYXRpb25zIGlzIHBvc3NpYmxlLiBOb3RlIHRoYXQgZGVmYXVsdHMgY2FuCiMgYmUgc3BlY2lmaWVkIGluIHRoZSB0b2tlbml6ZWQgY29uZmlndXJhdGlvbi4gaS5lLiwgJHtmb286LWJhcn0KIwojIHNlZTogaHR0cDovL3d3dy50bGRwLm9yZy9MRFAvYWJzL2h0bWwvcGFyYW1ldGVyLXN1YnN0aXR1dGlvbi5odG1sCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEVOVklST05NRU5UIElERU5USUZJRVIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKRU5WSVJPTk1FTlQ9YnZ0CgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFNJVEUgVVJMUwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyB0aGUgc2l0ZSBjZXJ0aWZpY2F0ZSBmaWxlcyAoLmNydCAmIC5rZXkpIGhhdmUgdG8gYmUgbmFtZWQgYWZ0ZXIgdGhlIEJBU0VfVVJMIHZhbHVlCkJBU0VfVVJMPWJ2dC5veGEubWljcm9zb2Z0LmNvbSAKTE1TX1VSTD1sbXMuJEJBU0VfVVJMCkNNU19VUkw9Y21zLiRCQVNFX1VSTApQUkVWSUVXX1VSTD1wcmV2aWV3LiRCQVNFX1VSTAoKIyBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24KIyBVUkwtYnVpbGRpbmcgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgdXNlIG9mIExNU19VUkwgfCBDTVNfVVJMIChhYm92ZSkKIyB1cmkgZm9ybWF0OiBbbG1zfGNtc10tJSVDTFVTVEVSTkFNRSUlLSUlREVQTE9ZTUVOVF9TTE9UJSUuJSVSRUdJT04lJS5jbG91ZGFwcC5henVyZS5jb20KVEVNUExBVEVfVFlQRT1zdGFtcCAjIHN0YW1wfHNjYWxhYmxlfGZ1bGxzdGFja3xkZXZzdGFjawpDTFVTVEVSTkFNRT17Q0xVU1RFUk5BTUV9CkFETUlOX1VTRVI9b3hhYWRtaW4KT1hBX1RPT0xTX1ZFUlNJT049b3hhL21hc3Rlci5maWMKCiMgY29uZmlnL3NlcnZlci12YXJzLnltbAojWU9VVFVCRV9BUElfS0VZPXRvZG8KUExBVEZPUk1fTkFNRT0KUExBVEZPUk1fRU1BSUw9CgojIGNvbmZpZy92ZXJzaW9ucy55bWwKQ09ORklHVVJBVElPTl9SRVBPPWh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvZWR4LWNvbmZpZ3VyYXRpb24uZ2l0CkNPTkZJR1VSQVRJT05fVkVSU0lPTj1veGEvbWFzdGVyLmZpYwpQTEFURk9STV9SRVBPPWh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvZWR4LXBsYXRmb3JtLmdpdApQTEFURk9STV9WRVJTSU9OPW94YS9tYXN0ZXIuZmljClRIRU1FX1JFUE89aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9lZHgtdGhlbWUuZ2l0ClRIRU1FX1ZFUlNJT049b3hhL21hc3Rlci5maWMKRURYX1ZFUlNJT049b3Blbi1yZWxlYXNlL2ZpY3VzLm1hc3RlcgpGT1JVTV9WRVJTSU9OPW9wZW4tcmVsZWFzZS9maWN1cy5tYXN0ZXIKCiMgZnVsbHN0YWNrIHVzZXMgZGVmYXVsdCBFTUFJTF9IT1NUPWxvY2FsaG9zdAojIGNvbmZpZy9zY2FsYWJsZS9zY2FsYWJsZS55bWwsIGNvbmZpZy9zdGFtcC9zdGFtcC55bWwKRURYQVBQX0VNQUlMX0hPU1Q9CkVEWEFQUF9FTUFJTF9IT1NUX1VTRVI9CkVEWEFQUF9FTUFJTF9IT1NUX1BBU1NXT1JEPQpFRFhBUFBfRU1BSUxfUE9SVD0KRURYQVBQX0VNQUlMX1VTRV9UTFM9dHJ1ZQoKIyBzdG9yYWdlIHVwbG9hZHMKQVpVUkVfQUNDT1VOVF9OQU1FPXtBWlVSRV9BQ0NPVU5UX05BTUV9CkFaVVJFX0FDQ09VTlRfS0VZPXtBWlVSRV9BQ0NPVU5UX0tFWX0KCk5HSU5YX0VOQUJMRV9TU0w9VHJ1ZQpOR0lOWF9TU0xfQ0VSVElGSUNBVEU9L294YS9veGEtdG9vbHMtY29uZmlnL2Vudi9idnQvY2VydC5jcnQKTkdJTlhfU1NMX0tFWT0vb3hhL294YS10b29scy1jb25maWcvZW52L2J2dC9jZXJ0LmtleQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyBNT05HTwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyBNb25nbyBDcmVkZW50aWFscwpNT05HT19VU0VSPQpNT05HT19QQVNTV09SRD0KCiMgTW9uZ28gUmVwbGljYXNldCBDcmVkZW50aWFscwpNT05HT19SRVBMSUNBU0VUX0tFWT0KTU9OR09fUkVQTElDQVNFVF9OQU1FPXtNT05HT19SRVBMSUNBU0VUX05BTUV9CgojIE1vbmdvREIgSW5zdGFsbGVyIENvbmZpZ3VyYXRpb25zCk1PTkdPX0lOU1RBTExFUl9TQ1JJUFQ9bW9uZ29kYi11YnVudHUtaW5zdGFsbC5zaApNT05HT19JTlNUQUxMRVJfQkFTRV9VUkw9aHR0cDovL3JlcG8ubW9uZ29kYi5vcmcvYXB0L3VidW50dQpNT05HT19JTlNUQUxMRVJfUEFDS0FHRV9OQU1FPW1vbmdvZGItb3JnCk1PTkdPX1NFUlZFUl9JUF9QUkVGSVg9MTAuMC4wLgpNT05HT19TRVJWRVJfSVBfT0ZGU0VUPTEwCk1PTkdPX1NFUlZFUl9MSVNUPTEwLjAuMC4xMSwxMC4wLjAuMTIsMTAuMC4wLjEzCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIE1ZU1FMCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojIE15c3FsIENyZWRlbnRpYWxzCk1ZU1FMX0FETUlOX1VTRVI9b3hhbXlzcWxhZG1pbgpNWVNRTF9BRE1JTl9QQVNTV09SRD0KCiMgTXlTcWwgVGVtcG9yYXJ5IENyZWRlbnRpYWxzCk1ZU1FMX1RFTVBfVVNFUj1veGFteXNxbGJhY2t1cApNWVNRTF9URU1QX1BBU1NXT1JEPQoKIyBBcHAgYW5kIFJlcGxpY2F0aW9uIGFjY291bnRzIChzYW1lIGFjY291bnQ/PykKIyBUT0RPOiBzZXBhcmF0ZSB0aGUgcmVwbGljYXRpb24gdXNlciBmcm9tIHRoZSBlZHhhcHAgdXNlcgpNWVNRTF9VU0VSPW94YW15c3FscmVwbApNWVNRTF9QQVNTV09SRD0KTVlTUUxfUkVQTF9VU0VSPW94YW15c3FscmVwbApNWVNRTF9SRVBMX1VTRVJfUEFTU1dPUkQ9CgojIE15c3FsIEluc3RhbGxlciBDb25maWd1cmF0aW9ucwpNWVNRTF9JTlNUQUxMRVJfU0NSSVBUPW15c3FsLXVidW50dS1pbnN0YWxsLnNoCk1ZU1FMX1BBQ0tBR0VfVkVSU0lPTj0iNS42IgpNWVNRTF9NQVNURVJfSVA9MTAuMC4wLjE2Ck1ZU1FMX1NFUlZFUl9MSVNUPTEwLjAuMC4xNiwxMC4wLjAuMTcsMTAuMC4wLjE4CgojIFN1cGVydXNlciBJbmZvcm1hdGlvbiAodGhpcyBnaXZlcyBmcm9udCBkb29yIGFjY2VzcyB0byB0aGUgYXBwbGljYXRpb24uIFRoaXMgdmFsdWUgbXVzdCBiZSB1cGRhdGVkLikKRURYQVBQX1NVX1BBU1NXT1JEPQpFRFhBUFBfU1VfRU1BSUw9CkVEWEFQUF9TVV9VU0VSTkFNRT0KCiMgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBPQXV0aDIgVGhpcmQgUGFydHkgQXV0aGVudGljYXRpb24gQ29uZmlndXJhdGlvbgpFRFhBUFBfRU5BQkxFX1RISVJEX1BBUlRZX0FVVEg9e0VEWEFQUF9FTkFCTEVfVEhJUkRfUEFSVFlfQVVUSH0KRURYQVBQX0FBRF9DTElFTlRfSUQ9IntFRFhBUFBfQUFEX0NMSUVOVF9JRH0iCkVEWEFQUF9BQURfU0VDVVJJVFlfS0VZPSJ7RURYQVBQX0FBRF9TRUNVUklUWV9LRVl9IgpFRFhBUFBfQUFEX0JVVFRPTl9OQU1FPSJ7RURYQVBQX0FBRF9CVVRUT05fTkFNRX0iCgojIENvbXByZWhlbnNpdmUgVGhlbWluZyBDb25maWd1cmF0aW9uCkVEWEFQUF9FTkFCTEVfQ09NUFJFSEVOU0lWRV9USEVNSU5HPXtFRFhBUFBfRU5BQkxFX0NPTVBSRUhFTlNJVkVfVEhFTUlOR30KRURYQVBQX0NPTVBSRUhFTlNJVkVfVEhFTUVfRElSUz1cW1wgXCJ7RURYQVBQX0NPTVBSRUhFTlNJVkVfVEhFTUVfRElSRUNUT1JZfVwiXCBcXQpFRFhBUFBfREVGQVVMVF9TSVRFX1RIRU1FPSJ7RURYQVBQX0RFRkFVTFRfU0lURV9USEVNRX0iCgojIEltcG9ydCBLaXRjaGVuIFNpbmsgQ291cnNlIENvbmZpZ3VyYXRpb24KRURYQVBQX0lNUE9SVF9LSVRDSEVOU0lOS19DT1VSU0U9e0VEWEFQUF9JTVBPUlRfS0lUQ0hFTlNJTktfQ09VUlNFfQoKIyBNZW1jYWNoZSBzZXJ2ZXIKIyBJbiBvcmRlciB0byBzdXBwb3J0IG11bHRpcGxlIFZNU1MgcmVzb3VyY2VzLCB3ZSBoYXZlIHRvIHN1cHBvcnQgbXVsdGlwbGUgbWVtY2FjaGUgdGFyZ2V0IHNlcnZlcnMgdG8gYXZvaWQgY29sbGlzaW9uIG9mIGNhY2hlIGtleXMgdGhhdCByZXN1bHQgaW4gCiMgYnJva2VuIGFwcGxpY2F0aW9uIGV4cGVyaWVuY2VzIChjYWNoZSBwb2lzb25pbmcpLiBJdCBpcyB0aGVyZWZvcmUgbmVjZXNzYXJ5IHRvIGFkZCBleHBsaWNpdCBjb25maWd1cmF0aW9uIGZvciB0aGUgbWVtY2FjaGUgc2VydmVyIGFuZCBhbGxvdyAKIyBkZXBsb3ltZW50LXRpbWUgb3ZlcnJpZGVzLgpNRU1DQUNIRV9TRVJWRVJfSVA9JE1ZU1FMX01BU1RFUl9JUA==",
            "metadata": {
                "description": "OXA cloud configuration file. This file is expected to be base64-encoded before pasting its contents here."
            }
        },
        "keyVaultSecretSslCertificate": {
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVUVENDQXpXZ0F3SUJBZ0lKQVByem5EdmRGZU9pTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUc4TVFzd0NRWUQKVlFRR0V3SlZVekVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFUU1BNEdBMVVFQnd3SFVtVmtiVzl1WkRFWApNQlVHQTFVRUNnd09UV2xqY205emIyWjBMQ0JKYm1NeEdEQVdCZ05WQkFzTUQweGxlQ0JGYm1kcGJtVmxjbWx1Clp6RXFNQ2dHQTFVRUF3d2hiWE52ZUdGemRHRnRjREV0ZEcwdWRISmhabVpwWTIxaGJtRm5aWEl1Ym1WME1TY3cKSlFZSktvWklodmNOQVFrQkZoaGtiMjV2ZEhKbGNHeDVRRzFwWTNKdmMyOW1kQzVqYjIwd0hoY05NVGN3TXpFMApNakEwTlRReVdoY05NVGd3TXpFME1qQTBOVFF5V2pDQnZERUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdNCkNsZGhjMmhwYm1kMGIyNHhFREFPQmdOVkJBY01CMUpsWkcxdmJtUXhGekFWQmdOVkJBb01EazFwWTNKdmMyOW0KZEN3Z1NXNWpNUmd3RmdZRFZRUUxEQTlNWlhnZ1JXNW5hVzVsWlhKcGJtY3hLakFvQmdOVkJBTU1JVzF6YjNoaApjM1JoYlhBeExYUnRMblJ5WVdabWFXTnRZVzVoWjJWeUxtNWxkREVuTUNVR0NTcUdTSWIzRFFFSkFSWVlaRzl1CmIzUnlaWEJzZVVCdGFXTnliM052Wm5RdVkyOXRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUIKQ2dLQ0FRRUFwdmpQcUlITVJ1NUxkL3JXWEUxelkzdklpYnlJT2tpM3NwRERnQ1NZWS9xdG1uUWxmeGtsVU9BNwpRcitQSWdxZzE4cWdGYmpjMFVoNHNLQXhhbHMrMkY1bzExQU1Ud1RtUTdMZy9IeUhHclhTSWZNdEZsUzZKZXhyCjlsUDg5Ri9YalhoeFQzbDMyYjBuVEZSaUprcHA5bnhoQVJNaW92UXhjSUpSd0U2MUpoSi9PazY0d3FBenQxL3EKaExuR0kxTVBQaWo4c3gxYy9xSlR4YU5yK2taYTlQNDRYZE5TMlZNN2UxbTcveWppWm12Z2dxTEJNcUxLSjR1Rwp6Wkh3Q3BqL2VGNVNDS3VSZE91RUFKNDI0SE4xVG9FNHE2anhRL3NhRTQ1TVNzYkVQTndBZjU2RGpRTDdWRk12CmRZclVoREhBR2lhMURHUy81RmZKY1hIajJTRlRzUUlEQVFBQm8xQXdUakFkQmdOVkhRNEVGZ1FVUkMzOGQvdFMKWS9RRUZhWlJrN3dlNXYxT05RMHdId1lEVlIwakJCZ3dGb0FVUkMzOGQvdFNZL1FFRmFaUms3d2U1djFPTlEwdwpEQVlEVlIwVEJBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWVxNzJNMTd1UEcvYllJUG9mYWszCjJCNlRJbjFaQzBLWXNFZzJFSVMxSTNQb21TY3FJMXhMc0I0WW9VYXJHNjBTY1hEY0l5STRnYTRXL0hLbVBreEUKNUoxNGN2Y3Ruc1Vkc3I2R3Z4TFFnM2FndTNHOVBpcFJZdWQ3dEtTcjI2VlNZQzladDdGR1VBcjVYUXNZQzhyTwo5STdBSHBweG53UTIwanExaXFDTG8wVVRCb2FkaGJvR1lDT09XTk9weitOMk42L0lKY3pGK3VzZjFsbkNrTGpBCjE5VjAyN0YvUU1kSm5VS2JteVdWK2FWUDNLM2RxZGorMHVOZ3ltb3gyUHF4eUg4MWxCOGJPUlRwNjdOQks0RnIKcFllV2pDenVsUjhRRmRabFBYbCt1a2NQVmJYcXdSQ3JjTnJWR291TnNybXdrdkhESldEamJkOVR2VGdvMk9EeAp4QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
            "metadata": {
                "description": "The certitficate (.crt ) file used for SSL encryption by the application servers. This file is expected to be base64-encoded before pasting its contents here."
            }
        },
        "keyVaultSecretSslCertificateKey": {
            "type": "string",
            "defaultValue": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRQ20rTStvZ2N4RzdrdDMKK3RaY1RYTmplOGlKdklnNlNMZXlrTU9BSkpoaitxMmFkQ1YvR1NWUTREdEN2NDhpQ3FEWHlxQVZ1TnpSU0hpdwpvREZxV3o3WVhtalhVQXhQQk9aRHN1RDhmSWNhdGRJaDh5MFdWTG9sN0d2MlUvejBYOWVOZUhGUGVYZlp2U2RNClZHSW1TbW4yZkdFQkV5S2k5REZ3Z2xIQVRyVW1Fbjg2VHJqQ29ETzNYK3FFdWNZalV3OCtLUHl6SFZ6K29sUEYKbzJ2NlJscjAvamhkMDFMWlV6dDdXYnYvS09KbWErQ0Nvc0V5b3Nvbmk0Yk5rZkFLbVA5NFhsSUlxNUYwNjRRQQpuamJnYzNWT2dUaXJxUEZEK3hvVGpreEt4c1E4M0FCL25vT05BdnRVVXk5MWl0U0VNY0FhSnJVTVpML2tWOGx4CmNlUFpJVk94QWdNQkFBRUNnZ0VCQUkyelpuZjQvNlhLb1oyRzhOaVFtalo1WEcwWDVQeWhyZFFLNnY4YkQ0RDUKd3M3cmRzN3dSaXptdnlRY2NacFFMc1F6bjd3UGtNYkRuRGs1R2ZiS3pRRE96bWE3OWxZeE1FR1AwMFF6WW0wVwpsT2hlK1lxVUNRNGFJRjJDVlpBR3JtWFBLMHBwS1g5TitjWGJieGhUMnExbVRPU2VtcXgwVkdqSkVCd0dMOUhJClRjQ0IzMHV4NUZpTnoxaWVjbTh6Q0U5Y2FjSHJ3ME5la2Qwb1poOEcrMzhuUEdZczBjdnhCMjhSUTNCeXhjaEIKaDE0czY2eEl1MnVnNEwwUjRZamFrMkdZLzlQSVhIeVg2bGNrTFhHK0F4Nm9Ea25MdThNZlY0bE1pZWlzTkpNbwpuZ0ZWV1dRR1dsU0RjQ2s4aE1ZOFB1aWxTb0xWNEgrM2FJeVFUZ2FQZkFFQ2dZRUExUmpxVjlNcWw2NXlraWt5Cm5jNFUzM0lIM3lkMVBOQTEwVUxJTWFVaThiQzhQTmp5UU9YWmt6RVZkKzloekdGcTQreFBHb2dubzhuRnJBS04Kck1wMDE4cSthT0pBQU1hUkYxNm9aVTAzQ29IcmNxbnhwODUvUkJkZ0U3bHA5L0hQZTV1ekdrc2VUUVQ2dDhmcAoyR2NXZGtEMk04WW50Qklmays2OVF6TFFhR0VDZ1lFQXlKYVU4SHNyQ3lVaDdhVEU0c1I2THFVVnVRNGFZWDJBClRqUzFWemo1SUpHbnp1dWVMRHJPVjlLelQ3THJWamxuMVgzK3NWa2crMXNYdUFZRnBBa1FOSXdEVi9rc2JCNzcKaHphMlJQTXdaQUNYY2MyanRXUXBybjFvdnJUL1BwTTNPbHlRQ0ZNaSs2M3hwWDNkNWdqNmRMSlUzS3JoeitBMgpiQUlXNTRVZmJWRUNnWUVBaW9Hd1I3ZE1OdHkvUVRzZjJDd0xxeFJ1QTJDZE5oTEsrQ0hsQjBlamg5NXM2MHZEClllVkQzd1VIUkRaR3BkWW42TTgrdHlzS1FNNHorbEtLaldYbVBpQmNWTVhCL2Y4U2JWTXNOdlBTTTdVd09RNDIKc1BCcURmTDNrcnB3SXlWN3k0YnZDY2NMZ2RvYnIvcHpoeUd5R3Rpc2JnaDg0L0RucjNwOGI4SUdiZUVDZ1lFQQp0T0wyVlJiOWJnT0NZU2ZoVlE0UmtOYldqQmNudXhyT0JiaUtmNm1sSDdXNk9tTklOR0tqaVpjOGxIYW91d3p4Cmtoa1pBUjE3SExDODV2cW5RNUhZeDBvc0NiMXVUZUp5dVRDaGxmUW9nMFgxVEc5QlhtYUJJQlYveTlxMUF0MEgKUk40TUZUWERxbXJtSzNNaUZEdXNnR2dCRnk0U2pMK0kxRVhlR2RKMjBNRUNnWUJTUWhvTDdCL0xic29CMzMvNgo4a0R1TUZpRWh4Nms5R2J0K3g3dWluTXFIaHBKNVpXYlpkcDhyU2FsQVV6VXRqRFg5ZEJvR2ZWRHV6bWdwditzCkt2OG9EUUpTbGtaSFJ6VGZCaFZ0cDR0RmtQbU9UVzd6SzRGNlc0cENJQ2RmWnV4U0VJT1pJVlVaR05tVWZMaE4KMFZEaU02L2Q5bFVjSUJURmVZOENjTis0M3c9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==",
            "metadata": {
                "description": "Certitficate key (.key ) file used for SSL encryption by the application servers. This file is expected to be base64-encoded before pasting its contents here."
            }
        }
    },
    "variables": {

        "clusterName": "[resourceGroup().name]",
        "clusterNameDomainName": "[variables('clusterName')]",
        "adminUsername": "oxaadmin",
        "mongoServerAdminUserName": "oxamongoadmin",
        "mysqlServerAdminUserName": "oxamysqladmin",
        "mysqlServerReplUserName": "oxamysqlrepluser",
        "mysqlBackupUserName": "oxamysqlbackupuser",

        "mongoServerAdminPassword": "[parameters('backendAdminUserPassword')]",
        "mysqlServerAdminPassword": "[parameters('backendAdminUserPassword')]",
        "mysqlServerReplPassword": "[parameters('backendAdminUserPassword')]",
        "mysqlBackupUserPassword": "[parameters('backendAdminUserPassword')]",

        "defaultApiVersion": "2015-05-01-preview",
        "apiVersion": "2016-09-01",
        "availabilitySetApiVersion": "2015-06-15",
        "networkApiVersion": "2016-03-30",
        "computeApiVersion": "2016-03-30",
        "insightsApiVersion": "2015-04-01",
        "keyVaultApiversion": "2015-06-01",
        "trafficManagerApiversion": "2015-11-01",
        "mediaServicesApiVersion": "2015-10-01",
        "storageApiVersion": "2016-01-01",
        "deploymentSlot": "slot1",

        "osImageSku": "16.04.0-LTS",
        "extraStorageDiskSizeGB": 256,
        "jumpboxVirtualMachineSku": "Standard_D1_v2",

        "autoScaleEnabled": false,
        "autoScaleCapacityDefault": "[parameters('frontendVirtualMachineCount')]",
        "autoScaleCapacityMaximum": "[parameters('frontendVirtualMachineCount')]",
        "autoScaleCapacityMinimum": "[parameters('frontendVirtualMachineCount')]",

        "keyVaultMasterAccountKeyAccessPermission": [ "all" ],
        "keyVaultMasterAccountSecretAccessPermission": [ "all" ],
        "keyVaultSku": "Standard",

        "armTemplateRelativePath": "templates/stamp",
        "customInstallerLaunchScript": "run-customizations.sh",
        "customInstallerMainScriptRelativePath": "scripts/bootstrap.sh",

        "mongoBackupFrequency": "0 0 * * *",
        "mysqlBackupFrequency": "0 */4 * * *",
        "mongoBackupRetentionDays": 30,
        "mysqlBackupRetentionDays": 30,
        "importKitchenSinkCourse": false,
        "enableComprehensiveTheming": false,
        "comprehensiveThemingDirectory": "",
        "comprehensiveThemingName": "",
        "enableThirdPartyAuth": false,
        "aadLoginButtonText": "",
        "baseDomain": "",
        "domainSeparator": "-",
        "mysqlServerPackageVersion": "5.6",

        "edxappSuperUserName": "oxamaster",
        "edxappSuperUserPassword": "[parameters('applicationAdminUserPassword')]",
        "edxappSuperUserEmail": "[parameters('clusterAdminEmailAddress')]",
        "edxPlatformName": "Contoso Learning",
        "edxPlatformEmail": "[parameters('clusterAdminEmailAddress')]",
        "memcacheServer": "",
        "azureCliVersion": "2",

        "lmsTrafficManagerStateMetadata": [ "Enabled", "Disabled", 1, 2 ],
        "cmsTrafficManagerStateMetadata": [ "Enabled", "Disabled", 1, 2 ],
        "previewTrafficManagerStateMetadata": [ "Enabled", "Disabled", 1, 2 ],

        "oxaToolsGithubAccountName": "Microsoft",
        "oxaToolsGithubProjectName": "oxa-tools",
        "oxaToolsGithubBranch": "oxa/master.fic.eltonc.stampv2amp",
        "edxConfigurationGithubAccountName": "Microsoft",
        "edxConfigurationGithubProjectName": "edx-configuration",
        "edxConfigurationGithubBranch": "oxa/master.fic",
        "edxPlatformGithubAccountName": "Microsoft",
        "edxPlatformGithubProjectName": "edx-platform",
        "edxPlatformGithubBranch": "oxa/master.fic.numpyfix",
        "edxThemeGithubAccountName": "microsoft",
        "edxThemeGithubProjectName": "edx-theme",
        "edxThemeGithubBranch": "oxa/master.fic",
        "ansibleGithubAccountName": "edx",
        "ansibleGithubProjectName": "ansible",
        "ansibleGithubBranch": "master",
        "edxVersion": "open-release/ficus.master",
        "edxForumVersion": "open-release/ficus.master",

        "virtualMachineExtensionsApiVersion": "[variables('defaultApiVersion')]",
        "virtualMachineApiVersion": "[variables('defaultApiVersion')]",

        "diagnosticStorageAccountName": "[concat(toLower(variables('clusterName')), 'diagnostics')]",
        "storageAccountName": "[concat(toLower(variables('clusterName')), 'vhdsa')]",
        "secureGenericStorageAccountName": "[concat(toLower(variables('clusterName')), 'securesa')]",
        "videoUploadsStorageAccountName": "[concat(toLower(variables('clusterName')), 'videosa')]",
        "wamsStorageAccountName": "[concat(toLower(variables('clusterName')), 'wamssa')]",
        "mediaServicesAccountName": "[concat(toLower(variables('clusterName')), 'wamsmedia')]",
        "storageAccountType": "Standard_LRS",
        "storageContainer": "[concat('https://', variables('storageAccountName'),'.blob.core.windows.net/vhds/')]",

        "loadBalancerName": "[concat(variables('clusterName'), '-lb-', variables('deploymentSlot'))]",
        "virtualNetworkName": "[concat(variables('clusterName'), '-vnet')]",
        "subnetName": "[concat(variables('clusterName'), '-subnet')]",
        "bePoolName": "[concat(variables('clusterName'), '-bepool-', variables('deploymentSlot'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",

        "vmssAutoscaleSettingNameSuffix": "-autoscale",
        "vmssName": "[concat(variables('clusterName'), '-vmss-', parameters('deploymentVersionId'))]",
        "vmssAutoScaleSettingsName": "[concat(variables('clusterName'), '-autoscale-', parameters('deploymentVersionId'))]",

        "cmsPublicAddressName": "cmsPublicAddress",
        "lmsPublicAddressName": "lmsPublicAddress",
        "previewPublicAddressName": "previewPublicAddress",
        "lbProbeLMSName": "tcpProbeLMS",
        "lbProbeCMSName": "tcpProbeCMS",
        "lbProbePreviewName": "tcpProbePreview",
        "lbProbeLMSSSLName": "[concat(variables('lbProbeLMSName'),'SSL')]",
        "lbProbeCMSSSLName": "[concat(variables('lbProbeCMSName'),'SSL')]",
        "lbProbePreviewSSLName": "[concat(variables('lbProbePreviewName'),'SSL')]",

        "keyVaultEnabledForDeployment": true,
        "keyVaultEnabledForTemplateDeployment": true,
        "keyVaultEnabledForVolumeEncryption": true,
        "keyVaultTenantId": "[subscription().subscriptionId]",

        "networkSettings": {
            "virtualNetworkName": "[variables('virtualNetworkName')]",
            "clusterName": "[variables('clusterName')]",
            "networkInterfaceNameSuffix": "-nic",
            "publicIPAddressNameSuffix": "-ip",
            "osDiskSuffix": "-osDisk",
            "availabilitySetNameSuffix": "-as",
            "ipConfigSuffix": "-ipconfig",
            "adminUsername": "[variables('adminUsername')]",
            "adminPublicKey": "[parameters('keyVaultAdminPublicKey')]",
            "mongoServerAdminPassword": "[variables('mongoServerAdminPassword')]",
            "publicIpAddressType": "Dynamic",
            "subnetName": "[variables('subnetName')]",
            "subnetRef": "[concat(variables('vnetID'), '/subnets/', variables('subnetName'))]",
            "subnetPrefix": "10.0.0.0/24",
            "addressPrefix": "10.0.0.0/16",
            "serverIpPrefix": "10.0.0.",
            "mongoServerIpOffset": 10,
            "mysqlServerIpOffset": 15,
            "jbNetworkSecurityGroupName": "[concat(variables('clusterName'),'-jb-', 'nsg')]",
            "vmssNetworkSecurityGroupName": "[concat(variables('clusterName'), '-vmss-', 'nsg')]",
            "mongoNetworkSecurityGroupName": "[concat(variables('clusterName'), '-mongo-', 'nsg')]",
            "mysqlNetworkSecurityGroupName": "[concat(variables('clusterName'), '-mysql-', 'nsg')]",
            "clusterKeyVaultName": "[concat(variables('clusterName'), '-kv')]",
            "clusterJumpBoxName": "[concat(variables('clusterName'), '-jb')]",
            "clusterJumpBoxDomainName": "[concat(variables('clusterName'), 'jb')]",
            "clusterMongoDataNodeName": "[concat(variables('clusterName'), '-mongo')]",
            "clusterMongoDataNodeDomainName": "[concat(variables('clusterName'), 'mongo')]",
            "clusterMysqlDataNodeName": "[concat(variables('clusterName'), '-mysql')]",
            "clusterMysqlDataNodeDomainName": "[concat(variables('clusterName'), 'mysql')]",
            "clusterVirtualMachineScaleSetName": "[variables('vmssName')]",
            "clusterVirtualMachineScaleSetDomainName": "[concat(variables('clusterName'), 'vmss')]",
            "clusterVirtualMachineScaleSetSettingsName": "[variables('vmssAutoScaleSettingsName')]",
            "jumpBoxAvailabilitySetFaultDomainCount": "1",
            "jumpBoxNodeCount": "1",
            "mongoDataNodesAvailabilitySetFaultDomainCount": "3",
            "mongoDataNodeCount": 3,
            "mysqlDataNodesAvailabilitySetFaultDomainCount": "3",
            "mysqlDataNodeCount": 3,

            "trafficManagerSettings": {
                "dnsTtlSeconds": 30,
                "monitorConfigProtocol": "https",

                "lms": {
                    "name": "[concat('lms-', variables('clusterName'), '-tm')]",
                    "monitorConfigPort": 443,
                    "monitorConfigPath": "/",
                    "endpoint1": {
                        "target": "[concat('lms-', variables('clusterName'), '-slot1.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('lmsTrafficManagerStateMetadata')[0]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('lmsTrafficManagerStateMetadata')[2]]"
                    },
                    "endpoint2": {
                        "target": "[concat('lms-', variables('clusterName'), '-slot2.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('lmsTrafficManagerStateMetadata')[1]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('lmsTrafficManagerStateMetadata')[3]]"
                    }
                },

                "cms": {
                    "name": "[concat('cms-', variables('clusterName'), '-tm')]",
                    "monitorConfigPort": 443,
                    "monitorConfigPath": "/",
                    "endpoint1": {
                        "target": "[concat('cms-', variables('clusterName'), '-slot1.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('cmsTrafficManagerStateMetadata')[0]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('cmsTrafficManagerStateMetadata')[2]]"
                    },
                    "endpoint2": {
                        "target": "[concat('cms-', variables('clusterName'), '-slot2.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('cmsTrafficManagerStateMetadata')[1]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('cmsTrafficManagerStateMetadata')[3]]"
                    }
                },

                "preview": {
                    "name": "[concat('preview-', variables('clusterName'), '-tm')]",
                    "monitorConfigPort": 443,
                    "monitorConfigPath": "/",
                    "endpoint1": {
                        "target": "[concat('preview-', variables('clusterName'), '-slot1.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('previewTrafficManagerStateMetadata')[0]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('previewTrafficManagerStateMetadata')[2]]"
                    },
                    "endpoint2": {
                        "target": "[concat('preview-', variables('clusterName'), '-slot2.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('previewTrafficManagerStateMetadata')[1]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('previewTrafficManagerStateMetadata')[3]]"
                    }
                }
            },

            "loadbalancerSettings": {
                "deploymentSlot": "[variables('deploymentSlot')]",
                "loadBalancerName": "[variables('loadBalancerName')]",
                "cmsLoadBalancerDomainName": "[concat('cms-', variables('clusterNameDomainName'), '-', variables('deploymentSlot'))]",
                "lmsLoadBalancerDomainName": "[concat('lms-', variables('clusterNameDomainName'), '-', variables('deploymentSlot'))]",
                "previewLoadBalancerDomainName": "[concat('preview-', variables('clusterNameDomainName'), '-', variables('deploymentSlot'))]",
                "natPoolName": "[concat(variables('clusterName'), '-natpool')]",

                "cmsPublicAddressName": "[variables('cmsPublicAddressName')]",
                "lmsPublicAddressName": "[variables('lmsPublicAddressName')]",
                "previewPublicAddressName": "[variables('previewPublicAddressName')]",

                "cmsIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/', variables('cmsPublicAddressName'))]",
                "lmsIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/', variables('lmsPublicAddressName'))]",
                "previewIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/', variables('previewPublicAddressName'))]",

                "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
                "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/', variables('bePoolName'))]",
                "bePoolName": "[variables('bePoolName')]",

                "lbProbeLMSName": "[variables('lbProbeLMSName')]",
                "lbProbeCMSName": "[variables('lbProbeCMSName')]",
                "lbProbePreviewName": "[variables('lbProbePreviewName')]",
                "lbProbeLMSSSLName": "[variables('lbProbeLMSSSLName')]",
                "lbProbeCMSSSLName": "[variables('lbProbeCMSSSLName')]",
                "lbProbePreviewSSLName": "[variables('lbProbePreviewSSLName')]",

                "lbProbeLMSID": "[concat(variables('lbID'),'/probes/', variables('lbProbeLMSName'))]",
                "lbProbeCMSID": "[concat(variables('lbID'),'/probes/', variables('lbProbeCMSName'))]",
                "lbProbePreviewID": "[concat(variables('lbID'),'/probes/', variables('lbProbePreviewName'))]",
                "lbProbeLMSSSLID": "[concat(variables('lbID'),'/probes/', variables('lbProbeLMSSSLName'))]",
                "lbProbeCMSSSLID": "[concat(variables('lbID'),'/probes/', variables('lbProbeCMSSSLName'))]",
                "lbProbePreviewSSLID": "[concat(variables('lbID'),'/probes/', variables('lbProbePreviewSSLName'))]",

                "natStartPort": 50000,
                "natEndPort": 50119,
                "natBackendPort": 22,
                "AutoscaleEnabled": "[variables('autoScaleEnabled')]",
                "AutoscaleCapacityDefault": "[variables('autoScaleCapacityDefault')]",
                "AutoscaleCapacityMaximum": "[variables('autoScaleCapacityMaximum')]",
                "AutoscaleCapacityMinimum": "[variables('autoScaleCapacityMinimum')]"
            }
        },

        "supportedOSName": "ubuntu",
        "supportedOSImagePublisher": "Canonical",
        "supportedOSImageOffer": "UbuntuServer",

        "storageSettings": {
            "storageContainer": "[variables('storageContainer')]",
            "storageContainerName": "vhds",
            "storageAccountType": "[variables('storageAccountType')]",
            "storageAccountName": "[variables('storageAccountName')]",
            "diagnosticStorageAccountName": "[variables('diagnosticStorageAccountName')]",
            "secureGenericStorageAccountName": "[variables('secureGenericStorageAccountName')]",
            "videoUploadsStorageAccountName": "[variables('videoUploadsStorageAccountName')]",
            "wamsStorageAccountName": "[variables('wamsStorageAccountName')]",
            "mediaServicesAccountName": "[variables('mediaServicesAccountName')]"
        },
        "jumpboxMachineSettings": {
            "vmSize": "[variables('jumpboxVirtualMachineSku')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "dataDiskSize": "[div(int(variables('extraStorageDiskSizeGB')), 2)]"
        },
        "mongoMachineSettings": {
            "vmSize": "[parameters('databaseVirtualMachineSku')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "dataDiskSize": "[variables('extraStorageDiskSizeGB')]",
            "installerBaseUrl": "http://repo.mongodb.org/apt/ubuntu",
            "installerPackages": "mongodb-org"
        },
        "mysqlMachineSettings": {
            "vmSize": "[parameters('databaseVirtualMachineSku')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "dataDiskSize": "[variables('extraStorageDiskSizeGB')]"
        },
        "frontendMachineSettings": {
            "vmSize": "[parameters('frontendVirtualMachineSku')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "capacity": "[parameters('frontendVirtualMachineSku')]",
            "dataDiskSize": "[variables('extraStorageDiskSizeGB')]"
        },
        "apiSettings": {
            "apiVersion": "[variables('apiVersion')]",
            "storageApiVersion": "[variables('storageApiVersion')]",
            "virtualMachineApiVersion": "[variables('virtualMachineApiVersion')]",
            "availabilitySetApiVersion": "[variables('availabilitySetApiVersion')]",
            "virtualMachineExtensionsApiVersion": "[variables('virtualMachineExtensionsApiVersion')]",
            "networkApiVersion": "[variables('networkApiVersion')]",
            "computeApiVersion": "[variables('computeApiVersion')]",
            "insightsApiVersion": "[variables('insightsApiVersion')]",
            "keyVaultApiversion": "[variables('keyVaultApiversion')]",
            "trafficManagerApiversion": "[variables('trafficManagerApiversion')]",
            "mediaServicesApiVersion": "[variables('mediaServicesApiVersion')]"
        },
        "keyVaultSettings": {
            "enabledForDeployment": "[variables('keyVaultEnabledForDeployment')]",
            "enabledForTemplateDeployment": "[variables('keyVaultEnabledForTemplateDeployment')]",
            "enabledForVolumeEncryption": "[variables('keyVaultEnabledForVolumeEncryption')]",
            "tenantId": "[subscription().tenantId]",
            "accessAccount": "[parameters('keyVaultAdminUserObjectId')]",
            "tenantKeyAccessPermission": "[variables('keyVaultMasterAccountKeyAccessPermission')]",
            "tenantSecretAccessPermission": "[variables('keyVaultMasterAccountSecretAccessPermission')]",
            "sku": "[variables('keyVaultSku')]",
            "secrets": {
                "CloudConfigSetting": {
                    "name": "[concat('OxaToolsConfigxxx', parameters('cloud'), 'yyysh')]",
                    "value": "[parameters('keyVaultSecretCloudConfiguration')]"
                },
                "SslCertSetting": {
                    "name": "OxaToolsConfigxxxcertyyycrt",
                    "value": "[parameters('keyVaultSecretSslCertificate')]"
                },
                "SslCertKeySetting": {
                    "name": "OxaToolsConfigxxxcertyyykey",
                    "value": "[parameters('keyVaultSecretSslCertificateKey')]"
                },
                "SshPrivateKeySetting": {
                    "name": "OxaToolsConfigxxxidzzzrsa",
                    "value": "[parameters('keyVaultAdminPrivateKey')]"
                },
                "SshPublicKeySetting": {
                    "name": "OxaToolsConfigxxxidzzzrsayyypub",
                    "value": "[base64(parameters('keyVaultAdminPublicKey'))]"
                }
            }
        },

        "azureSharedScriptUrl": "[concat('https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/', variables('supportedOSName'), '/')]",
        "templateBaseUrl": "[concat('https://raw.githubusercontent.com/',variables('oxaToolsGithubAccountName'), '/', variables('oxaToolsGithubProjectName'), '/', variables('oxaToolsGithubBranch'), '/', variables('armTemplateRelativePath'), '/')]",
        "clusterCustomInstallerScriptFullPath": "[concat( variables('templateBaseUrl'), variables('customInstallerLaunchScript') )]",
        "customInstallerOxaToolsGitHubRepositoryParameters": "[concat(' --oxatools-public-github-accountname ', variables('oxaToolsGithubAccountName'), ' --oxatools-public-github-projectname ', variables('oxaToolsGithubProjectName'), ' --oxatools-public-github-projectbranch ', variables('oxaToolsGithubBranch') )]",
        "customInstallerEdxConfigurationGitHubRepositoryParameters": "[concat(' --edxconfiguration-public-github-accountname ', variables('edxConfigurationGithubAccountName'), ' --edxconfiguration-public-github-projectname ', variables('edxConfigurationGithubProjectName'), ' --edxconfiguration-public-github-projectbranch ', variables('edxConfigurationGithubBranch') )]",
        "customInstallerEdxPlatformGitHubRepositoryParameters": "[concat(' --edxplatform-public-github-accountname ', variables('edxPlatformGithubAccountName'), ' --edxplatform-public-github-projectname ', variables('edxPlatformGithubProjectName'), ' --edxplatform-public-github-projectbranch ', variables('edxPlatformGithubBranch') )]",
        "customInstallerEdxThemeGitHubRepositoryParameters": "[concat(' --edxtheme-public-github-accountname ', variables('edxThemeGithubAccountName'), ' --edxtheme-public-github-projectname ', variables('edxThemeGithubProjectName'), ' --edxtheme-public-github-projectbranch ', variables('edxThemeGithubBranch') )]",
        "customInstallerAnsibleGitHubRepositoryParameters": "[concat(' --ansible-public-github-accountname ', variables('ansibleGithubAccountName'), ' --ansible-public-github-projectname ', variables('ansibleGithubProjectName'), ' --ansible-public-github-projectbranch ', variables('ansibleGithubBranch') )]",
        "customInstallerMiscRepositoryVersionParameters": "[concat(' --edxversion ', variables('edxVersion'), ' --forumversion ', variables('edxForumVersion'), ' --edxtheme-public-github-projectbranch ', variables('edxThemeGithubBranch') )]",
        "customInstallerKeyVaultParameters": "[concat(' --keyvault-name ', concat(variables('clusterName'), '-kv'), ' --aad-webclient-id ', parameters('azureActiveDirectoryWebClientId'), ' --aad-webclient-appkey ', parameters('azureActiveDirectoryWebClientKey'), ' --aad-tenant-id ', parameters('azureActiveDirectoryTenantId'), ' --azure-subscription-id ', subscription().subscriptionId)]",
        "customInstallerDomainOverrideParameters": "[concat(' --base-domain-override ', variables('baseDomain'), ' --domain-separator ', variables('domainSeparator') )]",

        "customInstallerOutputRedirect": " >> /var/log/bootstrap.csx.log 2>&1",
        "smtpParameters": "[concat(' --smtp-server ', parameters('smtpServer'), ' --smtp-server-port ', parameters('smtpServerPort'), ' --smtp-auth-user ', parameters('smtpAuthenticationUserName'), ' --smtp-auth-user-password ', parameters('smtpAuthenticationUserPassword'), '  --cluster-admin-email ', parameters('clusterAdminEmailAddress'))]",

        "secureGenericStorageAccountId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('secureGenericStorageAccountName'))]",
        "secureGenericStorageAccountKey": "PLACEHOLDER_KEY",
        "backupParameters": "[concat(' --storage-account-key ', variables('secureGenericStorageAccountKey'),' --storage-account-name ', variables('secureGenericStorageAccountName'), ' --mongo-backup-frequency \"', replace(variables('mongoBackupFrequency'), ' ', '_'), '\" --mysql-backup-frequency \"', replace(variables('mysqlBackupFrequency'), ' ', '_'), '\" --mongo-backup-retention-days ', variables('mongoBackupRetentionDays'), ' --mysql-backup-retention-days ', variables('mysqlBackupRetentionDays'))]",

        "sampleCourseParameters": "[concat(' --import-kitchensink-course ', variables('importKitchenSinkCourse'))]",
        "comprehensiveThemingParameters": "[concat(' --enable-comprehensive-theming ', variables('enableComprehensiveTheming'), ' --comprehensive-theming-directory ', variables('comprehensiveThemingDirectory'), ' --comprehensive-theming-name ', variables('comprehensiveThemingName'))]",
        "authenticationParameters": "[concat(' --enable-thirdparty-auth ', variables('enableThirdPartyAuth'), ' --aad-loginbutton-text \"', replace(variables('aadLoginButtonText'), ' ', '_'), '\"')]",
        "databaseParameters": "[concat(' --mongo-adminuser ', variables('mongoServerAdminUserName'), ' --mongo-adminuserpassword \"', variables('mongoServerAdminPassword'), '\" --mongo-replicasetkey \"', variables('mongoReplicaSetKey'), '\" --mysql-backupuser ', variables('mysqlBackupUserName'), ' --mysql-backupuserpassword \"', variables('mysqlBackupUserPassword'), '\" --mysql-repluser \"', variables('mysqlServerReplUserName'), '\" --mysql-repluserpassword \"', variables('mysqlServerReplPassword'), '\" --mysql-adminuser \"', variables('mysqlServerAdminUserName'), '\" --mysql-adminuserpassword \"', variables('mysqlServerAdminPassword'), '\" --mysql-repluser \"', variables('mysqlServerReplUserName'), '\" --mysql-repluserpassword \"', variables('mysqlServerReplPassword'), '\" --mysql-adminuser \"', variables('mysqlServerAdminUserName'), '\" --mysql-adminuserpassword \"', variables('mysqlServerAdminPassword'), '\"')]",
        "edxappParameters": "[concat(' --platform-email \"', variables('edxPlatformEmail'), '\" --platform-name \"', base64(variables('edxPlatformName')), '\" --edxapp-superuser \"', variables('edxappSuperUserName'), '\" --edxapp-superuserpassword \"', variables('edxappSuperUserPassword'), '\" --edxapp-superuseremail \"', variables('edxappSuperUserEmail'), '\"')]",
        "memcacheParameters": "[concat(' --memcache-server \"', base64(variables('memcacheServer')), '\"')]",
        "azureCliParameters": "[concat(' --azurecli-version \"', variables('azureCliVersion'), '\"')]",

        "customInstallerCommand": "[concat('bash ', variables('customInstallerLaunchScript'),' -i ', variables('customInstallerMainScriptRelativePath'), ' -c ', parameters('cloud'), ' -m ', variables('clusterName'), ' -u ', variables('adminUsername'), ' --cluster-name ', variables('clusterName'), variables('customInstallerKeyVaultParameters'), variables('customInstallerOxaToolsGitHubRepositoryParameters'), variables('customInstallerEdxConfigurationGitHubRepositoryParameters'), variables('smtpParameters'), variables('customInstallerEdxPlatformGitHubRepositoryParameters'), variables('customInstallerEdxThemeGitHubRepositoryParameters'), variables('customInstallerMiscRepositoryVersionParameters'), variables('customInstallerAnsibleGitHubRepositoryParameters'), variables('backupParameters'), variables('sampleCourseParameters'), variables('comprehensiveThemingParameters'), variables('authenticationParameters'), variables('customInstallerDomainOverrideParameters'), variables('databaseParameters'), variables('edxappParameters'), variables('memcacheParameters'), variables('azureCliParameters'), variables('customInstallerOutputRedirect') )]",

        "sharedTemplateUrl": "[concat(variables('templateBaseUrl'), 'shared-resources.json')]",
        "jumpboxTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-jumpbox.json')]",
        "keyvaultTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-keyvault-amp.json')]",
        "trafficManagerTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-trafficmanager.json')]",
        "mongoNodeTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-mongo.json')]",
        "mysqlNodeTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-mysql.json')]",
        "vmssTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-vmss.json')]",
        "mongoReplicaSetName": "[concat(variables('clusterName'), 'rs1')]",
        "mongoReplicaSetKey": "[uniqueString(resourceGroup().id)]",

        "installerUtilitiesScript": "utilities.sh",
        "mongoDbInstallerScript": "[concat('mongodb-', variables('supportedOSName'), '-install.sh')]",
        "mongoDbInstallerCommand": "[concat('bash ', variables('mongoDbInstallerScript'), ' -i ', variables('mongoMachineSettings').installerBaseUrl, ' -b ', variables('mongoMachineSettings').installerPackages, ' -r ', variables('mongoReplicaSetName'), ' -k ', variables('mongoReplicaSetKey'), ' -u ', variables('mongoServerAdminUserName'), ' -p ', base64(variables('mongoServerAdminPassword')), ' -x ', variables('networkSettings').serverIpPrefix, ' -n ', variables('networkSettings').mongoDataNodeCount)]",
        "mongoDBInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('templateBaseUrl'), variables('mongoDbInstallerScript'))]",
                "[concat(variables('azureSharedScriptUrl'), 'vm-disk-utils-0.1.sh')]",
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]",
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]"
            ],
            "regularNodeInstallCommand": "[concat(variables('customInstallerCommand'), ' && ', variables('mongoDbInstallerCommand'))]",
            "lastNodeInstallCommand": "[concat(variables('customInstallerCommand'), ' && ', variables('mongoDbInstallerCommand'), ' -l ')]"
        },

        "mysqlDbInstallerScript": "[concat('mysql-', variables('supportedOSName'), '-install.sh')]",
        "mysqlDbInstallerCommand": "[concat('bash ', variables('mysqlDbInstallerScript'), ' -r ', variables('mysqlServerReplUserName'), ' -k ', base64(variables('mysqlServerReplPassword')), ' -u ', variables('mysqlServerAdminUserName'), ' -p ', base64(variables('mysqlServerAdminPassword')), ' -v ', variables('mysqlServerPackageVersion'), ' -m ', variables('networkSettings').serverIpPrefix, add(int(variables('networkSettings').mysqlServerIpOffset),1) )]",
        "mysqlDBInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('templateBaseUrl'), variables('mysqlDbInstallerScript'))]",
                "[concat(variables('templateBaseUrl'), 'mysqld.template.cnf')]",
                "[concat(variables('azureSharedScriptUrl'), 'vm-disk-utils-0.1.sh')]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]",
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]"
            ],
            "regularNodeInstallCommand": "[concat(variables('customInstallerCommand'), ' && ', variables('mysqlDbInstallerCommand'))]"
        },

        "jumpBoxInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]"
            ],
            "customInstallerCommand": "[variables('customInstallerCommand')]"
        },

        "vmssInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]"
            ],
            "customInstallerCommand": "[variables('customInstallerCommand')]"
        },

        "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
        "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
        "vmssLinuxDiagnosticsSettings": {
            "diagnosticsStorageAccountName": "[variables('diagnosticStorageAccountName')]",
            "diagnosticsStorageAccountId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticStorageAccountName'))]",
            "wadcfgxstart": "[concat('<WadCfg><DiagnosticMonitorConfiguration>',variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
            "wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',variables('vmssName'))]",
            "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]"
        }
    },
    "resources": [
        {
            "name": "shared-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sharedTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    }
                }
            }
        },
        {
            "name": "jumpbox",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "mongoNodesLoop",
                "mysqlMasterNodeLoop",
                "keyVault"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('jumpboxTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('jumpboxMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "vmScripts": "[variables('jumpBoxInstallerSettings').scriptsToDownload]",
                            "customInstallerCommandToExecute": "[variables('jumpBoxInstallerSettings').customInstallerCommand]",
                            "storageKeyPlaceholder": "[variables('secureGenericStorageAccountKey')]",
                            "secureGenericStorageAccountKey": "[base64('')]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('networkSettings').clusterMongoDataNodeName, copyindex(1))]",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "keyVault"
            ],
            "copy": {
                "name": "mongoNodesLoop",
                "count": "[int(variables('networkSettings').mongoDataNodeCount)]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('mongoNodeTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('mongoMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "machineIndex": "[copyindex(1)]",
                            "vmScripts": "[variables('mongoDBInstallerSettings').scriptsToDownload]",
                            "adminUsername": "[variables('networkSettings').adminUsername]",
                            "adminPassword": "[variables('networkSettings').mongoServerAdminPassword]",
                            "machineNamePrefix": "[variables('networkSettings').clusterMongoDataNodeName]",
                            "osImageReference": "[variables('mongoMachineSettings').osImageReference]",
                            "vmSize": "[variables('mongoMachineSettings').vmSize]",
                            "dataDiskSize": "[variables('mongoMachineSettings').dataDiskSize]",
                            "commandToExecute": "[variables('mongoDBInstallerSettings').regularNodeInstallCommand]",
                            "machineIpOffset": "[int(variables('networkSettings').mongoServerIpOffset)]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('networkSettings').clusterMysqlDataNodeName, copyindex(1))]",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "keyVault"
            ],
            "copy": {
                "name": "mysqlMasterNodeLoop",
                "count": "[int(variables('networkSettings').mysqlDataNodeCount)]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('mysqlNodeTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('mysqlMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "machineIndex": "[copyindex(1)]",
                            "vmScripts": "[variables('mysqlDBInstallerSettings').scriptsToDownload]",
                            "commandToExecute": "[concat(variables('mysqlDBInstallerSettings').regularNodeInstallCommand, ' -n ', copyindex(1))]",
                            "machineIpOffset": "[int(variables('networkSettings').mysqlServerIpOffset)]"
                        }
                    }
                }
            }
        },

        {
            "name": "vmss",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "keyVault",
                "jumpbox"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vmssTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('frontendMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "vmScripts": "[variables('vmssInstallerSettings').scriptsToDownload]",
                            "commandToExecute": "[variables('vmssInstallerSettings').customInstallerCommand]",
                            "linuxDiagnosticsSettings": "[variables('vmssLinuxDiagnosticsSettings')]",
                            "storageKeyPlaceholder": "[variables('secureGenericStorageAccountKey')]",
                            "secureGenericStorageAccountKey": "[base64('')]"
                        }
                    }
                }
            }
        },
        {
            "name": "keyVault",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('keyVaultTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "keyVaultSettings": {
                        "value": "[variables('keyVaultSettings')]"
                    }
                }
            }
        },
        {
            "name": "trafficManagerLms",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "vmss"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('trafficManagerTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "trafficManagerName": "[variables('networkSettings').trafficManagerSettings.lms.name]",
                            "relativeDnsName": "[variables('networkSettings').trafficManagerSettings.lms.name]",
                            "dnsTtl": "[variables('networkSettings').trafficManagerSettings.dnsTtlSeconds]",
                            "monitorConfigProtocol": "[variables('networkSettings').trafficManagerSettings.monitorConfigProtocol]",
                            "monitorConfigPort": "[variables('networkSettings').trafficManagerSettings.lms.monitorConfigPort]",
                            "monitorConfigPath": "[variables('networkSettings').trafficManagerSettings.lms.monitorConfigPath]",
                            "endpoint1": "[variables('networkSettings').trafficManagerSettings.lms.endpoint1]",
                            "endpoint2": "[variables('networkSettings').trafficManagerSettings.lms.endpoint2]"
                        }
                    }
                }
            }
        },
        {
            "name": "trafficManagerCms",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "vmss"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('trafficManagerTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "trafficManagerName": "[variables('networkSettings').trafficManagerSettings.cms.name]",
                            "relativeDnsName": "[variables('networkSettings').trafficManagerSettings.cms.name]",
                            "dnsTtl": "[variables('networkSettings').trafficManagerSettings.dnsTtlSeconds]",
                            "monitorConfigProtocol": "[variables('networkSettings').trafficManagerSettings.monitorConfigProtocol]",
                            "monitorConfigPort": "[variables('networkSettings').trafficManagerSettings.cms.monitorConfigPort]",
                            "monitorConfigPath": "[variables('networkSettings').trafficManagerSettings.cms.monitorConfigPath]",
                            "endpoint1": "[variables('networkSettings').trafficManagerSettings.cms.endpoint1]",
                            "endpoint2": "[variables('networkSettings').trafficManagerSettings.cms.endpoint2]"
                        }
                    }
                }
            }
        },
        {
            "name": "trafficManagerPreview",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "vmss"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('trafficManagerTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "trafficManagerName": "[variables('networkSettings').trafficManagerSettings.preview.name]",
                            "relativeDnsName": "[variables('networkSettings').trafficManagerSettings.preview.name]",
                            "dnsTtl": "[variables('networkSettings').trafficManagerSettings.dnsTtlSeconds]",
                            "monitorConfigProtocol": "[variables('networkSettings').trafficManagerSettings.monitorConfigProtocol]",
                            "monitorConfigPort": "[variables('networkSettings').trafficManagerSettings.preview.monitorConfigPort]",
                            "monitorConfigPath": "[variables('networkSettings').trafficManagerSettings.preview.monitorConfigPath]",
                            "endpoint1": "[variables('networkSettings').trafficManagerSettings.preview.endpoint1]",
                            "endpoint2": "[variables('networkSettings').trafficManagerSettings.preview.endpoint2]"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "mongoReplicaSetKey": {
            "type": "string",
            "value": "[variables('mongoReplicaSetKey')]"
        },
        "mongoReplicaSetName": {
            "type": "string",
            "value": "[variables('mongoReplicaSetName')]"
        },
        "resourceGroupLocation": {
            "type": "string",
            "value": "[resourceGroup().location]"
        }
    }
}