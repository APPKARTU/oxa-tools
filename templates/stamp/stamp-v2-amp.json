{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "clusterName": {
            "type": "string",
            "maxLength": 12
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "allowedValues": [
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2"
            ]
        },
        "databaseAdminPassword": {
            "type": "securestring"
        },
        "cloud": {
            "type": "string",
            "defaultValue": "bvt",
            "allowedValues": [
                "bvt",
                "int",
                "prod"
            ],
            "metadata": {
                "description": "The target cloud/environment"
            }
        },
        "deploymentVersionId": {
            "type": "string",
            "defaultValue": "201611211241",
            "metadata": {
                "description": "The identifier for versioning bits deployed to VMSS"
            }
        },
        "aadWebClientId": {
            "type": "string",
            "metadata": {
                "description": "Client Id of the AAD user or web application that will have access to the azure keyvault."
            }
        },
        "aadWebClientAppKey": {
            "type": "securestring",
            "metadata": {
                "description": "Client Key of the AAD user or web application that will have access to the azure keyvault."
            }
        },
        "aadTenantId": {
            "type": "string",
            "metadata": {
                "description": "Id of the AAD tenant the user or web application will authenticate against."
            }
        },
        "keyVaultMasterAccountId": {
            "type": "string",
            "metadata": {
                "description": "Object Id of the AAD user or service principal that will have access to the vault. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
            }
        },
        "smtpServer": {
            "type": "string",
            "metadata": {
                "description": "FQDN of SMTP server used for relaying deployment and other system notifications"
            }
        },
        "smtpServerPort": {
            "type": "string",
            "metadata": {
                "description": "Port of SMTP server used for relaying deployment and other system notifications"
            }
        },
        "smtpAuthenticationUser": {
            "type": "string",
            "metadata": {
                "description": "User name for authenticating against the SMTP server used for relaying deployment and other system notifications"
            }
        },
        "smtpAuthenticationUserPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for authenticating against the SMTP server used for relaying deployment and other system notifications"
            }
        },
        "clusterAdmininistratorEmailAddress": {
            "type": "string",
            "metadata": {
                "description": "Email address of the administrator where system and other notifications will be sent"
            }
        },
        "keyVaultAdminPublicKey": {
            "type": "securestring"
        },
        "keyVaultAdminPrivateKey": {
            "type": "string",
            "metadata": {
                "description": "OXA cloud configuration file"
            }
        },
        "keyVaultSecretCloudConfiguration": {
            "type": "string",
            "metadata": {
                "description": "OXA cloud configuration file"
            }
        },
        "keyVaultSecretSslCertificate": {
            "type": "string",
            "metadata": {
                "description": "Certitficate (.crt ) file used for SSL encryption by the application servers"
            }
        },
        "keyVaultSecretSslCertificateKey": {
            "type": "string",
            "metadata": {
                "description": "Certitficate key (.key ) file used for SSL encryption by the application servers"
            }
        }
    },
    "variables": {

        "clusterNameDomainName": "[parameters('clusterName')]",
        "adminUsername": "oxaadmin",
        "mongoServerAdminUserName": "oxamongoadmin",
        "mysqlServerAdminUserName": "oxamysqladmin",
        "mysqlServerReplUserName": "oxamysqlrepluser",
        "mysqlBackupUserName": "oxamysqlbackupuser",

        "mongoServerAdminPassword": "[parameters('databaseAdminPassword')]",
        "mysqlServerAdminPassword": "[parameters('databaseAdminPassword')]",
        "mysqlServerReplPassword": "[parameters('databaseAdminPassword')]",
        "mysqlBackupUserPassword": "[parameters('databaseAdminPassword')]",

        "defaultApiVersion": "2015-05-01-preview",
        "apiVersion": "2016-09-01",
        "availabilitySetApiVersion": "2015-06-15",
        "networkApiVersion": "2016-03-30",
        "computeApiVersion": "2016-03-30",
        "insightsApiVersion": "2015-04-01",
        "keyVaultApiversion": "2015-06-01",
        "trafficManagerApiversion": "2015-11-01",
        "mediaServicesApiVersion": "2015-10-01",
        "storageApiVersion": "2016-01-01",
        "deploymentSlot": "slot1",

        "osImageSku": "16.04.0-LTS",
        "extraStorageDiskSizeGB": 256,

        "autoScaleEnabled": true,
        "autoScaleCapacityDefault": 2,
        "autoScaleCapacityMaximum": 3,
        "autoScaleCapacityMinimum": 1,

        "keyVaultMasterAccountKeyAccessPermission": [ "all" ],
        "keyVaultMasterAccountSecretAccessPermission": [ "all" ],
        "keyVaultSku": "Standard",

        "armTemplateRelativePath": "templates/stamp",
        "customInstallerLaunchScript": "run-customizations.sh",
        "customInstallerMainScriptRelativePath": "scripts/bootstrap.sh",

        "mongoBackupFrequency": "0 0 * * *",
        "mysqlBackupFrequency": "0 */4 * * *",
        "mongoBackupRetentionDays": 30,
        "mysqlBackupRetentionDays": 30,
        "importKitchenSinkCourse": false,
        "enableComprehensiveTheming": false,
        "comprehensiveThemingDirectory": "",
        "comprehensiveThemingName": "",
        "enableThirdPartyAuth": false,
        "aadLoginButtonText": "",
        "baseDomain": "",
        "domainSeparator": "-",
        "mysqlServerPackageVersion": "5.6",

        "edxappSuperUserName": "oxamaster",
        "edxappSuperUserPassword": "[parameters('databaseAdminPassword')]",
        "edxappSuperUserEmail": "[parameters('clusterAdmininistratorEmailAddress')]",
        "edxPlatformName": "Contoso Learning",
        "edxPlatformEmail": "[parameters('clusterAdmininistratorEmailAddress')]",
        "memcacheServer": "",
        "azureCliVersion": "2",

        "lmsTrafficManagerStateMetadata": [ "Enabled", "Disabled", 1, 2 ],
        "cmsTrafficManagerStateMetadata": [ "Enabled", "Disabled", 1, 2 ],
        "previewTrafficManagerStateMetadata": [ "Enabled", "Disabled", 1, 2 ],

        "oxaToolsGithubAccountName": "Microsoft",
        "oxaToolsGithubProjectName": "oxa-tools",
        "oxaToolsGithubBranch": "oxa/master.fic.eltonc.stampv2amp",
        "edxConfigurationGithubAccountName": "Microsoft",
        "edxConfigurationGithubProjectName": "edx-configuration",
        "edxConfigurationGithubBranch": "oxa/master.fic",
        "edxPlatformGithubAccountName": "Microsoft",
        "edxPlatformGithubProjectName": "edx-platform",
        "edxPlatformGithubBranch": "oxa/master.fic",
        "edxThemeGithubAccountName": "microsoft",
        "edxThemeGithubProjectName": "edx-theme",
        "edxThemeGithubBranch": "oxa/master.fic",
        "ansibleGithubAccountName": "edx",
        "ansibleGithubProjectName": "ansible",
        "ansibleGithubBranch": "master",
        "edxVersion": "open-release/ficus.master",
        "edxForumVersion": "open-release/ficus.master",

        "virtualMachineExtensionsApiVersion": "[variables('defaultApiVersion')]",
        "virtualMachineApiVersion": "[variables('defaultApiVersion')]",

        "diagnosticStorageAccountName": "[concat(toLower(parameters('clusterName')), 'diagnostics')]",
        "storageAccountName": "[concat(toLower(parameters('clusterName')), 'vhdsa')]",
        "secureGenericStorageAccountName": "[concat(toLower(parameters('clusterName')), 'securesa')]",
        "videoUploadsStorageAccountName": "[concat(toLower(parameters('clusterName')), 'videosa')]",
        "wamsStorageAccountName": "[concat(toLower(parameters('clusterName')), 'wamssa')]",
        "mediaServicesAccountName": "[concat(toLower(parameters('clusterName')), 'wamsmedia')]",
        "storageAccountType": "Standard_LRS",
        "storageContainer": "[concat('https://', variables('storageAccountName'),'.blob.core.windows.net/vhds/')]",

        "loadBalancerName": "[concat(parameters('clusterName'), '-lb-', variables('deploymentSlot'))]",
        "virtualNetworkName": "[concat(parameters('clusterName'), '-vnet')]",
        "subnetName": "[concat(parameters('clusterName'), '-subnet')]",
        "bePoolName": "[concat(parameters('clusterName'), '-bepool-', variables('deploymentSlot'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",

        "vmssAutoscaleSettingNameSuffix": "-autoscale",
        "vmssName": "[concat(parameters('clusterName'), '-vmss-', parameters('deploymentVersionId'))]",
        "vmssAutoScaleSettingsName": "[concat(parameters('clusterName'), '-autoscale-', parameters('deploymentVersionId'))]",

        "cmsPublicAddressName": "cmsPublicAddress",
        "lmsPublicAddressName": "lmsPublicAddress",
        "previewPublicAddressName": "previewPublicAddress",
        "lbProbeLMSName": "tcpProbeLMS",
        "lbProbeCMSName": "tcpProbeCMS",
        "lbProbePreviewName": "tcpProbePreview",
        "lbProbeLMSSSLName": "[concat(variables('lbProbeLMSName'),'SSL')]",
        "lbProbeCMSSSLName": "[concat(variables('lbProbeCMSName'),'SSL')]",
        "lbProbePreviewSSLName": "[concat(variables('lbProbePreviewName'),'SSL')]",

        "keyVaultEnabledForDeployment": true,
        "keyVaultEnabledForTemplateDeployment": true,
        "keyVaultEnabledForVolumeEncryption": true,
        "keyVaultTenantId": "[subscription().subscriptionId]",

        "networkSettings": {
            "virtualNetworkName": "[variables('virtualNetworkName')]",
            "clusterName": "[parameters('clusterName')]",
            "networkInterfaceNameSuffix": "-nic",
            "publicIPAddressNameSuffix": "-ip",
            "osDiskSuffix": "-osDisk",
            "availabilitySetNameSuffix": "-as",
            "ipConfigSuffix": "-ipconfig",
            "adminUsername": "[variables('adminUsername')]",
            "adminPublicKey": "[parameters('keyVaultAdminPublicKey')]",
            "mongoServerAdminPassword": "[variables('mongoServerAdminPassword')]",
            "publicIpAddressType": "Dynamic",
            "subnetName": "[variables('subnetName')]",
            "subnetRef": "[concat(variables('vnetID'), '/subnets/', variables('subnetName'))]",
            "subnetPrefix": "10.0.0.0/24",
            "addressPrefix": "10.0.0.0/16",
            "serverIpPrefix": "10.0.0.",
            "mongoServerIpOffset": 10,
            "mysqlServerIpOffset": 15,
            "jbNetworkSecurityGroupName": "[concat(parameters('clusterName'),'-jb-', 'nsg')]",
            "vmssNetworkSecurityGroupName": "[concat(parameters('clusterName'), '-vmss-', 'nsg')]",
            "mongoNetworkSecurityGroupName": "[concat(parameters('clusterName'), '-mongo-', 'nsg')]",
            "mysqlNetworkSecurityGroupName": "[concat(parameters('clusterName'), '-mysql-', 'nsg')]",
            "clusterKeyVaultName": "[concat(parameters('clusterName'), '-kv')]",
            "clusterJumpBoxName": "[concat(parameters('clusterName'), '-jb')]",
            "clusterJumpBoxDomainName": "[concat(parameters('clusterName'), 'jb')]",
            "clusterMongoDataNodeName": "[concat(parameters('clusterName'), '-mongo')]",
            "clusterMongoDataNodeDomainName": "[concat(parameters('clusterName'), 'mongo')]",
            "clusterMysqlDataNodeName": "[concat(parameters('clusterName'), '-mysql')]",
            "clusterMysqlDataNodeDomainName": "[concat(parameters('clusterName'), 'mysql')]",
            "clusterVirtualMachineScaleSetName": "[variables('vmssName')]",
            "clusterVirtualMachineScaleSetDomainName": "[concat(parameters('clusterName'), 'vmss')]",
            "clusterVirtualMachineScaleSetSettingsName": "[variables('vmssAutoScaleSettingsName')]",
            "jumpBoxAvailabilitySetFaultDomainCount": "1",
            "jumpBoxNodeCount": "1",
            "mongoDataNodesAvailabilitySetFaultDomainCount": "3",
            "mongoDataNodeCount": 3,
            "mysqlDataNodesAvailabilitySetFaultDomainCount": "3",
            "mysqlDataNodeCount": 3,

            "trafficManagerSettings": {
                "dnsTtlSeconds": 30,
                "monitorConfigProtocol": "https",

                "lms": {
                    "name": "[concat('lms-', parameters('clusterName'), '-tm')]",
                    "monitorConfigPort": 443,
                    "monitorConfigPath": "/",
                    "endpoint1": {
                        "target": "[concat('lms-', parameters('clusterName'), '-slot1.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('lmsTrafficManagerStateMetadata')[0]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('lmsTrafficManagerStateMetadata')[2]]"
                    },
                    "endpoint2": {
                        "target": "[concat('lms-', parameters('clusterName'), '-slot2.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('lmsTrafficManagerStateMetadata')[1]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('lmsTrafficManagerStateMetadata')[3]]"
                    }
                },

                "cms": {
                    "name": "[concat('cms-', parameters('clusterName'), '-tm')]",
                    "monitorConfigPort": 443,
                    "monitorConfigPath": "/",
                    "endpoint1": {
                        "target": "[concat('cms-', parameters('clusterName'), '-slot1.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('cmsTrafficManagerStateMetadata')[0]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('cmsTrafficManagerStateMetadata')[2]]"
                    },
                    "endpoint2": {
                        "target": "[concat('cms-', parameters('clusterName'), '-slot2.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('cmsTrafficManagerStateMetadata')[1]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('cmsTrafficManagerStateMetadata')[3]]"
                    }
                },

                "preview": {
                    "name": "[concat('preview-', parameters('clusterName'), '-tm')]",
                    "monitorConfigPort": 443,
                    "monitorConfigPath": "/",
                    "endpoint1": {
                        "target": "[concat('preview-', parameters('clusterName'), '-slot1.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('previewTrafficManagerStateMetadata')[0]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('previewTrafficManagerStateMetadata')[2]]"
                    },
                    "endpoint2": {
                        "target": "[concat('preview-', parameters('clusterName'), '-slot2.',resourceGroup().location, '.cloudapp.azure.com')]",
                        "status": "[variables('previewTrafficManagerStateMetadata')[1]]",
                        "location": "[resourceGroup().location]",
                        "priority": "[variables('previewTrafficManagerStateMetadata')[3]]"
                    }
                }
            },

            "loadbalancerSettings": {
                "deploymentSlot": "[variables('deploymentSlot')]",
                "loadBalancerName": "[variables('loadBalancerName')]",
                "cmsLoadBalancerDomainName": "[concat('cms-', variables('clusterNameDomainName'), '-', variables('deploymentSlot'))]",
                "lmsLoadBalancerDomainName": "[concat('lms-', variables('clusterNameDomainName'), '-', variables('deploymentSlot'))]",
                "previewLoadBalancerDomainName": "[concat('preview-', variables('clusterNameDomainName'), '-', variables('deploymentSlot'))]",
                "natPoolName": "[concat(parameters('clusterName'), '-natpool')]",

                "cmsPublicAddressName": "[variables('cmsPublicAddressName')]",
                "lmsPublicAddressName": "[variables('lmsPublicAddressName')]",
                "previewPublicAddressName": "[variables('previewPublicAddressName')]",

                "cmsIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/', variables('cmsPublicAddressName'))]",
                "lmsIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/', variables('lmsPublicAddressName'))]",
                "previewIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/', variables('previewPublicAddressName'))]",

                "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
                "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/', variables('bePoolName'))]",
                "bePoolName": "[variables('bePoolName')]",

                "lbProbeLMSName": "[variables('lbProbeLMSName')]",
                "lbProbeCMSName": "[variables('lbProbeCMSName')]",
                "lbProbePreviewName": "[variables('lbProbePreviewName')]",
                "lbProbeLMSSSLName": "[variables('lbProbeLMSSSLName')]",
                "lbProbeCMSSSLName": "[variables('lbProbeCMSSSLName')]",
                "lbProbePreviewSSLName": "[variables('lbProbePreviewSSLName')]",

                "lbProbeLMSID": "[concat(variables('lbID'),'/probes/', variables('lbProbeLMSName'))]",
                "lbProbeCMSID": "[concat(variables('lbID'),'/probes/', variables('lbProbeCMSName'))]",
                "lbProbePreviewID": "[concat(variables('lbID'),'/probes/', variables('lbProbePreviewName'))]",
                "lbProbeLMSSSLID": "[concat(variables('lbID'),'/probes/', variables('lbProbeLMSSSLName'))]",
                "lbProbeCMSSSLID": "[concat(variables('lbID'),'/probes/', variables('lbProbeCMSSSLName'))]",
                "lbProbePreviewSSLID": "[concat(variables('lbID'),'/probes/', variables('lbProbePreviewSSLName'))]",

                "natStartPort": 50000,
                "natEndPort": 50119,
                "natBackendPort": 22,
                "AutoscaleEnabled": "[variables('autoScaleEnabled')]",
                "AutoscaleCapacityDefault": "[variables('autoScaleCapacityDefault')]",
                "AutoscaleCapacityMaximum": "[variables('autoScaleCapacityMaximum')]",
                "AutoscaleCapacityMinimum": "[variables('autoScaleCapacityMinimum')]"
            }
        },

        "supportedOSName": "ubuntu",
        "supportedOSImagePublisher": "Canonical",
        "supportedOSImageOffer": "UbuntuServer",

        "storageSettings": {
            "storageContainer": "[variables('storageContainer')]",
            "storageContainerName": "vhds",
            "storageAccountType": "[variables('storageAccountType')]",
            "storageAccountName": "[variables('storageAccountName')]",
            "diagnosticStorageAccountName": "[variables('diagnosticStorageAccountName')]",
            "secureGenericStorageAccountName": "[variables('secureGenericStorageAccountName')]",
            "videoUploadsStorageAccountName": "[variables('videoUploadsStorageAccountName')]",
            "wamsStorageAccountName": "[variables('wamsStorageAccountName')]",
            "mediaServicesAccountName": "[variables('mediaServicesAccountName')]"
        },
        "jumpboxMachineSettings": {
            "vmSize": "[parameters('vmSize')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "dataDiskSize": "[variables('extraStorageDiskSizeGB')]"
        },
        "mongoMachineSettings": {
            "vmSize": "[parameters('vmSize')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "dataDiskSize": "[variables('extraStorageDiskSizeGB')]",
            "installerBaseUrl": "http://repo.mongodb.org/apt/ubuntu",
            "installerPackages": "mongodb-org"
        },
        "mysqlMachineSettings": {
            "vmSize": "[parameters('vmSize')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "dataDiskSize": "[variables('extraStorageDiskSizeGB')]"
        },
        "frontendMachineSettings": {
            "vmSize": "[parameters('vmSize')]",
            "osImageReference": {
                "publisher": "[variables('supportedOSImagePublisher')]",
                "offer": "[variables('supportedOSImageOffer')]",
                "sku": "[variables('osImageSku')]",
                "version": "latest"
            },
            "capacity": "[parameters('vmSize')]",
            "dataDiskSize": 256
        },
        "apiSettings": {
            "apiVersion": "[variables('apiVersion')]",
            "storageApiVersion": "[variables('storageApiVersion')]",
            "virtualMachineApiVersion": "[variables('virtualMachineApiVersion')]",
            "availabilitySetApiVersion": "[variables('availabilitySetApiVersion')]",
            "virtualMachineExtensionsApiVersion": "[variables('virtualMachineExtensionsApiVersion')]",
            "networkApiVersion": "[variables('networkApiVersion')]",
            "computeApiVersion": "[variables('computeApiVersion')]",
            "insightsApiVersion": "[variables('insightsApiVersion')]",
            "keyVaultApiversion": "[variables('keyVaultApiversion')]",
            "trafficManagerApiversion": "[variables('trafficManagerApiversion')]",
            "mediaServicesApiVersion": "[variables('mediaServicesApiVersion')]"
        },
        "keyVaultSettings": {
            "enabledForDeployment": "[variables('keyVaultEnabledForDeployment')]",
            "enabledForTemplateDeployment": "[variables('keyVaultEnabledForTemplateDeployment')]",
            "enabledForVolumeEncryption": "[variables('keyVaultEnabledForVolumeEncryption')]",
            "tenantId": "[subscription().tenantId]",
            "accessAccount": "[parameters('keyVaultMasterAccountId')]",
            "tenantKeyAccessPermission": "[variables('keyVaultMasterAccountKeyAccessPermission')]",
            "tenantSecretAccessPermission": "[variables('keyVaultMasterAccountSecretAccessPermission')]",
            "sku": "[variables('keyVaultSku')]",
            "secrets": {
                "CloudConfigSetting": {
                    "name": "[concat('OxaToolsConfigxxx', parameters('cloud'), 'yyysh')]",
                    "value": "[parameters('keyVaultSecretCloudConfiguration')]"
                },
                "SslCertSetting": {
                    "name": "OxaToolsConfigxxxcertyyycrt",
                    "value": "[parameters('keyVaultSecretSslCertificate')]"
                },
                "SslCertKeySetting": {
                    "name": "OxaToolsConfigxxxcertyyykey",
                    "value": "[parameters('keyVaultSecretSslCertificateKey')]"
                },
                "SshPrivateKeySetting": {
                    "name": "OxaToolsConfigxxxidzzzrsa",
                    "value": "[parameters('keyVaultAdminPrivateKey')]"
                },
                "SshPublicKeySetting": {
                    "name": "OxaToolsConfigxxxidzzzrsayyypub",
                    "value": "[base64(parameters('keyVaultAdminPublicKey'))]"
                }
            }
        },

        "azureSharedScriptUrl": "[concat('https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/', variables('supportedOSName'), '/')]",
        "templateBaseUrl": "[concat('https://raw.githubusercontent.com/',variables('oxaToolsGithubAccountName'), '/', variables('oxaToolsGithubProjectName'), '/', variables('oxaToolsGithubBranch'), '/', variables('armTemplateRelativePath'), '/')]",
        "clusterCustomInstallerScriptFullPath": "[concat( variables('templateBaseUrl'), variables('customInstallerLaunchScript') )]",
        "customInstallerOxaToolsGitHubRepositoryParameters": "[concat(' --oxatools-public-github-accountname ', variables('oxaToolsGithubAccountName'), ' --oxatools-public-github-projectname ', variables('oxaToolsGithubProjectName'), ' --oxatools-public-github-projectbranch ', variables('oxaToolsGithubBranch') )]",
        "customInstallerEdxConfigurationGitHubRepositoryParameters": "[concat(' --edxconfiguration-public-github-accountname ', variables('edxConfigurationGithubAccountName'), ' --edxconfiguration-public-github-projectname ', variables('edxConfigurationGithubProjectName'), ' --edxconfiguration-public-github-projectbranch ', variables('edxConfigurationGithubBranch') )]",
        "customInstallerEdxPlatformGitHubRepositoryParameters": "[concat(' --edxplatform-public-github-accountname ', variables('edxPlatformGithubAccountName'), ' --edxplatform-public-github-projectname ', variables('edxPlatformGithubProjectName'), ' --edxplatform-public-github-projectbranch ', variables('edxPlatformGithubBranch') )]",
        "customInstallerEdxThemeGitHubRepositoryParameters": "[concat(' --edxtheme-public-github-accountname ', variables('edxThemeGithubAccountName'), ' --edxtheme-public-github-projectname ', variables('edxThemeGithubProjectName'), ' --edxtheme-public-github-projectbranch ', variables('edxThemeGithubBranch') )]",
        "customInstallerAnsibleGitHubRepositoryParameters": "[concat(' --ansible-public-github-accountname ', variables('ansibleGithubAccountName'), ' --ansible-public-github-projectname ', variables('ansibleGithubProjectName'), ' --ansible-public-github-projectbranch ', variables('ansibleGithubBranch') )]",
        "customInstallerMiscRepositoryVersionParameters": "[concat(' --edxversion ', variables('edxVersion'), ' --forumversion ', variables('edxForumVersion'), ' --edxtheme-public-github-projectbranch ', variables('edxThemeGithubBranch') )]",
        "customInstallerKeyVaultParameters": "[concat(' --keyvault-name ', concat(parameters('clusterName'), '-kv'), ' --aad-webclient-id ', parameters('aadWebClientId'), ' --aad-webclient-appkey ', parameters('aadWebClientAppKey'), ' --aad-tenant-id ', parameters('aadTenantId'), ' --azure-subscription-id ', subscription().subscriptionId)]",
        "customInstallerDomainOverrideParameters": "[concat(' --base-domain-override ', variables('baseDomain'), ' --domain-separator ', variables('domainSeparator') )]",

        "customInstallerOutputRedirect": " >> /var/log/bootstrap.csx.log 2>&1",
        "smtpParameters": "[concat(' --smtp-server ', parameters('smtpServer'), ' --smtp-server-port ', parameters('smtpServerPort'), ' --smtp-auth-user ', parameters('smtpAuthenticationUser'), ' --smtp-auth-user-password ', parameters('smtpAuthenticationUserPassword'), '  --cluster-admin-email ', parameters('clusterAdmininistratorEmailAddress'))]",

        "secureGenericStorageAccountId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('secureGenericStorageAccountName'))]",
        "secureGenericStorageAccountKey": "PLACEHOLDER_KEY",
        "backupParameters": "[concat(' --storage-account-key ', variables('secureGenericStorageAccountKey'),' --storage-account-name ', variables('secureGenericStorageAccountName'), ' --mongo-backup-frequency \"', replace(variables('mongoBackupFrequency'), ' ', '_'), '\" --mysql-backup-frequency \"', replace(variables('mysqlBackupFrequency'), ' ', '_'), '\" --mongo-backup-retention-days ', variables('mongoBackupRetentionDays'), ' --mysql-backup-retention-days ', variables('mysqlBackupRetentionDays'))]",

        "sampleCourseParameters": "[concat(' --import-kitchensink-course ', variables('importKitchenSinkCourse'))]",
        "comprehensiveThemingParameters": "[concat(' --enable-comprehensive-theming ', variables('enableComprehensiveTheming'), ' --comprehensive-theming-directory ', variables('comprehensiveThemingDirectory'), ' --comprehensive-theming-name ', variables('comprehensiveThemingName'))]",
        "authenticationParameters": "[concat(' --enable-thirdparty-auth ', variables('enableThirdPartyAuth'), ' --aad-loginbutton-text \"', replace(variables('aadLoginButtonText'), ' ', '_'), '\"')]",
        "databaseParameters": "[concat(' --mongo-adminuser ', variables('mongoServerAdminUserName'), ' --mongo-adminuserpassword \"', variables('mongoServerAdminPassword'), '\" --mongo-replicasetkey \"', variables('mongoReplicaSetKey'), '\" --mysql-backupuser ', variables('mysqlBackupUserName'), ' --mysql-backupuserpassword \"', variables('mysqlBackupUserPassword'), '\" --mysql-repluser \"', variables('mysqlServerReplUserName'), '\" --mysql-repluserpassword \"', variables('mysqlServerReplPassword'), '\" --mysql-adminuser \"', variables('mysqlServerAdminUserName'), '\" --mysql-adminuserpassword \"', variables('mysqlServerAdminPassword'), '\" --mysql-repluser \"', variables('mysqlServerReplUserName'), '\" --mysql-repluserpassword \"', variables('mysqlServerReplPassword'), '\" --mysql-adminuser \"', variables('mysqlServerAdminUserName'), '\" --mysql-adminuserpassword \"', variables('mysqlServerAdminPassword'), '\"')]",
        "edxappParameters": "[concat(' --platform-email \"', variables('edxPlatformEmail'), '\" --platform-name \"', base64(variables('edxPlatformName')), '\" --edxapp-superuser \"', variables('edxappSuperUserName'), '\" --edxapp-superuserpassword \"', variables('edxappSuperUserPassword'), '\" --edxapp-superuseremail \"', variables('edxappSuperUserEmail'), '\"')]",
        "memcacheParameters": "[concat(' --memcache-server \"', base64(variables('memcacheServer')), '\"')]",
        "azureCliParameters": "[concat(' --azurecli-version \"', variables('azureCliVersion'), '\"')]",

        "customInstallerCommand": "[concat('bash ', variables('customInstallerLaunchScript'),' -i ', variables('customInstallerMainScriptRelativePath'), ' -c ', parameters('cloud'), ' -m ', parameters('clusterName'), ' -u ', variables('adminUsername'), ' --cluster-name ', parameters('clusterName'), variables('customInstallerKeyVaultParameters'), variables('customInstallerOxaToolsGitHubRepositoryParameters'), variables('customInstallerEdxConfigurationGitHubRepositoryParameters'), variables('smtpParameters'), variables('customInstallerEdxPlatformGitHubRepositoryParameters'), variables('customInstallerEdxThemeGitHubRepositoryParameters'), variables('customInstallerMiscRepositoryVersionParameters'), variables('customInstallerAnsibleGitHubRepositoryParameters'), variables('backupParameters'), variables('sampleCourseParameters'), variables('comprehensiveThemingParameters'), variables('authenticationParameters'), variables('customInstallerDomainOverrideParameters'), variables('databaseParameters'), variables('edxappParameters'), variables('memcacheParameters'), variables('azureCliParameters'), variables('customInstallerOutputRedirect') )]",

        "sharedTemplateUrl": "[concat(variables('templateBaseUrl'), 'shared-resources.json')]",
        "jumpboxTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-jumpbox.json')]",
        "keyvaultTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-keyvault-amp.json')]",
        "trafficManagerTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-trafficmanager.json')]",
        "mongoNodeTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-mongo.json')]",
        "mysqlNodeTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-mysql.json')]",
        "vmssTemplateUrl": "[concat(variables('templateBaseUrl'), 'node-vmss.json')]",
        "mongoReplicaSetName": "[concat(parameters('clusterName'), 'rs1')]",
        "mongoReplicaSetKey": "[uniqueString(resourceGroup().id)]",

        "installerUtilitiesScript": "utilities.sh",
        "mongoDbInstallerScript": "[concat('mongodb-', variables('supportedOSName'), '-install.sh')]",
        "mongoDbInstallerCommand": "[concat('bash ', variables('mongoDbInstallerScript'), ' -i ', variables('mongoMachineSettings').installerBaseUrl, ' -b ', variables('mongoMachineSettings').installerPackages, ' -r ', variables('mongoReplicaSetName'), ' -k ', variables('mongoReplicaSetKey'), ' -u ', variables('mongoServerAdminUserName'), ' -p ', base64(variables('mongoServerAdminPassword')), ' -x ', variables('networkSettings').serverIpPrefix, ' -n ', variables('networkSettings').mongoDataNodeCount)]",
        "mongoDBInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('templateBaseUrl'), variables('mongoDbInstallerScript'))]",
                "[concat(variables('azureSharedScriptUrl'), 'vm-disk-utils-0.1.sh')]",
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]",
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]"
            ],
            "regularNodeInstallCommand": "[concat(variables('customInstallerCommand'), ' && ', variables('mongoDbInstallerCommand'))]",
            "lastNodeInstallCommand": "[concat(variables('customInstallerCommand'), ' && ', variables('mongoDbInstallerCommand'), ' -l ')]"
        },

        "mysqlDbInstallerScript": "[concat('mysql-', variables('supportedOSName'), '-install.sh')]",
        "mysqlDbInstallerCommand": "[concat('bash ', variables('mysqlDbInstallerScript'), ' -r ', variables('mysqlServerReplUserName'), ' -k ', base64(variables('mysqlServerReplPassword')), ' -u ', variables('mysqlServerAdminUserName'), ' -p ', base64(variables('mysqlServerAdminPassword')), ' -v ', variables('mysqlServerPackageVersion'), ' -m ', variables('networkSettings').serverIpPrefix, add(int(variables('networkSettings').mysqlServerIpOffset),1) )]",
        "mysqlDBInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('templateBaseUrl'), variables('mysqlDbInstallerScript'))]",
                "[concat(variables('templateBaseUrl'), 'mysqld.template.cnf')]",
                "[concat(variables('azureSharedScriptUrl'), 'vm-disk-utils-0.1.sh')]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]",
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]"
            ],
            "regularNodeInstallCommand": "[concat(variables('customInstallerCommand'), ' && ', variables('mysqlDbInstallerCommand'))]"
        },

        "jumpBoxInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]"
            ],
            "customInstallerCommand": "[variables('customInstallerCommand')]"
        },

        "vmssInstallerSettings": {
            "scriptsToDownload": [
                "[concat(variables('clusterCustomInstallerScriptFullPath'))]",
                "[concat(variables('templateBaseUrl'), variables('installerUtilitiesScript'))]"
            ],
            "customInstallerCommand": "[variables('customInstallerCommand')]"
        },

        "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
        "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
        "vmssLinuxDiagnosticsSettings": {
            "diagnosticsStorageAccountName": "[variables('diagnosticStorageAccountName')]",
            "diagnosticsStorageAccountId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticStorageAccountName'))]",
            "wadcfgxstart": "[concat('<WadCfg><DiagnosticMonitorConfiguration>',variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
            "wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',variables('vmssName'))]",
            "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]"
        }
    },
    "resources": [
        {
            "name": "shared-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sharedTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    }
                }
            }
        },
        {
            "name": "jumpbox",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "mongoNodesLoop",
                "mysqlMasterNodeLoop",
                "keyVault"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('jumpboxTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('jumpboxMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "vmScripts": "[variables('jumpBoxInstallerSettings').scriptsToDownload]",
                            "customInstallerCommandToExecute": "[variables('jumpBoxInstallerSettings').customInstallerCommand]",
                            "storageKeyPlaceholder": "[variables('secureGenericStorageAccountKey')]",
                            "secureGenericStorageAccountKey": "[listKeys(variables('secureGenericStorageAccountId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('networkSettings').clusterMongoDataNodeName, copyindex(1))]",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "keyVault"
            ],
            "copy": {
                "name": "mongoNodesLoop",
                "count": "[int(variables('networkSettings').mongoDataNodeCount)]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('mongoNodeTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('mongoMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "machineIndex": "[copyindex(1)]",
                            "vmScripts": "[variables('mongoDBInstallerSettings').scriptsToDownload]",
                            "adminUsername": "[variables('networkSettings').adminUsername]",
                            "adminPassword": "[variables('networkSettings').mongoServerAdminPassword]",
                            "machineNamePrefix": "[variables('networkSettings').clusterMongoDataNodeName]",
                            "osImageReference": "[variables('mongoMachineSettings').osImageReference]",
                            "vmSize": "[variables('mongoMachineSettings').vmSize]",
                            "dataDiskSize": "[variables('mongoMachineSettings').dataDiskSize]",
                            "commandToExecute": "[variables('mongoDBInstallerSettings').regularNodeInstallCommand]",
                            "machineIpOffset": "[int(variables('networkSettings').mongoServerIpOffset)]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('networkSettings').clusterMysqlDataNodeName, copyindex(1))]",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "keyVault"
            ],
            "copy": {
                "name": "mysqlMasterNodeLoop",
                "count": "[int(variables('networkSettings').mysqlDataNodeCount)]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('mysqlNodeTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('mysqlMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "machineIndex": "[copyindex(1)]",
                            "vmScripts": "[variables('mysqlDBInstallerSettings').scriptsToDownload]",
                            "commandToExecute": "[concat(variables('mysqlDBInstallerSettings').regularNodeInstallCommand, ' -n ', copyindex(1))]",
                            "machineIpOffset": "[int(variables('networkSettings').mysqlServerIpOffset)]"
                        }
                    }
                }
            }
        },

        {
            "name": "vmss",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]",
                "keyVault",
                "jumpbox"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vmssTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('frontendMachineSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "vmScripts": "[variables('vmssInstallerSettings').scriptsToDownload]",
                            "commandToExecute": "[variables('vmssInstallerSettings').customInstallerCommand]",
                            "linuxDiagnosticsSettings": "[variables('vmssLinuxDiagnosticsSettings')]",
                            "storageKeyPlaceholder": "[variables('secureGenericStorageAccountKey')]",
                            "secureGenericStorageAccountKey": "[listKeys(variables('secureGenericStorageAccountId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                        }
                    }
                }
            }
        },
        {
            "name": "keyVault",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('keyVaultTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "keyVaultSettings": {
                        "value": "[variables('keyVaultSettings')]"
                    }
                }
            }
        },
        {
            "name": "trafficManagerLms",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "vmss"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('trafficManagerTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "trafficManagerName": "[variables('networkSettings').trafficManagerSettings.lms.name]",
                            "relativeDnsName": "[variables('networkSettings').trafficManagerSettings.lms.name]",
                            "dnsTtl": "[variables('networkSettings').trafficManagerSettings.dnsTtlSeconds]",
                            "monitorConfigProtocol": "[variables('networkSettings').trafficManagerSettings.monitorConfigProtocol]",
                            "monitorConfigPort": "[variables('networkSettings').trafficManagerSettings.lms.monitorConfigPort]",
                            "monitorConfigPath": "[variables('networkSettings').trafficManagerSettings.lms.monitorConfigPath]",
                            "endpoint1": "[variables('networkSettings').trafficManagerSettings.lms.endpoint1]",
                            "endpoint2": "[variables('networkSettings').trafficManagerSettings.lms.endpoint2]"
                        }
                    }
                }
            }
        },
        {
            "name": "trafficManagerCms",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "vmss"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('trafficManagerTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "trafficManagerName": "[variables('networkSettings').trafficManagerSettings.cms.name]",
                            "relativeDnsName": "[variables('networkSettings').trafficManagerSettings.cms.name]",
                            "dnsTtl": "[variables('networkSettings').trafficManagerSettings.dnsTtlSeconds]",
                            "monitorConfigProtocol": "[variables('networkSettings').trafficManagerSettings.monitorConfigProtocol]",
                            "monitorConfigPort": "[variables('networkSettings').trafficManagerSettings.cms.monitorConfigPort]",
                            "monitorConfigPath": "[variables('networkSettings').trafficManagerSettings.cms.monitorConfigPath]",
                            "endpoint1": "[variables('networkSettings').trafficManagerSettings.cms.endpoint1]",
                            "endpoint2": "[variables('networkSettings').trafficManagerSettings.cms.endpoint2]"
                        }
                    }
                }
            }
        },
        {
            "name": "trafficManagerPreview",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersion')]",
            "dependsOn": [
                "vmss"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('trafficManagerTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiSettings": {
                        "value": "[variables('apiSettings')]"
                    },
                    "customSettings": {
                        "value": {
                            "trafficManagerName": "[variables('networkSettings').trafficManagerSettings.preview.name]",
                            "relativeDnsName": "[variables('networkSettings').trafficManagerSettings.preview.name]",
                            "dnsTtl": "[variables('networkSettings').trafficManagerSettings.dnsTtlSeconds]",
                            "monitorConfigProtocol": "[variables('networkSettings').trafficManagerSettings.monitorConfigProtocol]",
                            "monitorConfigPort": "[variables('networkSettings').trafficManagerSettings.preview.monitorConfigPort]",
                            "monitorConfigPath": "[variables('networkSettings').trafficManagerSettings.preview.monitorConfigPath]",
                            "endpoint1": "[variables('networkSettings').trafficManagerSettings.preview.endpoint1]",
                            "endpoint2": "[variables('networkSettings').trafficManagerSettings.preview.endpoint2]"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "mongoReplicaSetKey": {
            "type": "string",
            "value": "[variables('mongoReplicaSetKey')]"
        },
        "mongoReplicaSetName": {
            "type": "string",
            "value": "[variables('mongoReplicaSetName')]"
        },
        "resourceGroupLocation": {
            "type": "string",
            "value": "[resourceGroup().location]"
        }
    }
}